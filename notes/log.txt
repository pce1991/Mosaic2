DEV LOG

When the file extension is changed to .cpp the makefile automatically uses g++ instead of gcc, but I doubt this is robust (like it might not work on mac).


@TODO: do I suppress warnings? they're super annoying

@TODO: I want to write the compiles as python scripts I think for multiplatform. Or maybe just convert them to bash, duh


@TODO: let the bash file take a custom executable name? 


@TODO: for easy itch building needs to be index.html

@BUG: web builds cant load textures


@TODO: for emmscripten try this to allow more memory -s INITIAL_MEMORY=64MB



- @TODO: for input I guess I can just use Raylib's functions. But I kinda prefer IsPressed(device) to IsDevicePressed...
  It just feels a bit dumb to write wrapper and a mapping between our specific type...

  One reason I like passing devices more is its a better mapping to an action system

  Change it to InputMouseDiscrete or maybe just append all with Input_MouseLeft....

  I'd kinda rather have MouseButton_Left than Input_MouseLeft as an API, but raylib has already defined MouseButton...



- @TODO: UGH so if I want to get VS pdb files we have to build differently, which makes sense obvioussly. So now I need to look into how to compile raylib with MSVC instead of cmake

  @TODO: I think I also need to have a way to make sure that students know they must build raylib at least once right?


  ========================================
  Install CMake (if not already): https://cmake.org/download

  Open x64 Native Tools Command Prompt for VS 2022

  Run the following commands:

  cd C:\raylib\raylib
  mkdir build_msvc
  cd build_msvc

  cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Debug -DSTATIC=ON -DBUILD_EXAMPLES=OFF ..
  nmake

  This will build raylib.lib and place it in build_msvc\.

  Your .bat file should now point to:

  set "RAYLIB_LIB=C:\raylib\raylib\build_msvc\raylib"
  ;; verify that raylib.lib is put here every time!
  ========================================

  I dont love that we have to explicity make it...

  - If I dont want to that I believe I can do this:

@echo off
setlocal enabledelayedexpansion

:: Check if input file is provided
if "%~1"=="" (
    echo Please drag a .cpp file onto this script or provide a path to your source file.
    pause
    exit /b
)

:: === Setup Paths ===
set "INPUT_FULL=%~1"
set "NAME_PART=%~n1"
set "BUILD_DIR=build"

:: Path to raylib (edit this if your raylib path differs)
set "RAYLIB_PATH=C:\raylib\raylib"
set "RAYLIB_SRC=%RAYLIB_PATH%\src"
set "RAYLIB_INC=%RAYLIB_SRC%"

:: === Create build output directory ===
if not exist "%BUILD_DIR%" mkdir "%BUILD_DIR%"

:: === List of raylib .c source files ===
set SOURCES=
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rcore.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rlgl.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rshapes.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rtextures.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rtext.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rmodels.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\utils.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\raudio.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rglfw.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rgestures.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\raymath.c"
set SOURCES=%SOURCES% "%RAYLIB_SRC%\rcamera.c"

:: === Clean old build ===
if exist "%BUILD_DIR%\%NAME_PART%.exe" del /F "%BUILD_DIR%\%NAME_PART%.exe"
if exist "%BUILD_DIR%\%NAME_PART%.pdb" del /F "%BUILD_DIR%\%NAME_PART%.pdb"

:: === Build command ===
echo.
echo Compiling with MSVC...
echo.

cl.exe /EHsc /Zi /std:c++20 /MDd ^
    "%INPUT_FULL%" %SOURCES% ^
    /I"%RAYLIB_INC%" /I"external" ^
    /Fe"%BUILD_DIR%\%NAME_PART%.exe" ^
    /Fd"%BUILD_DIR%\%NAME_PART%.pdb" ^
    /link ^
    opengl32.lib gdi32.lib winmm.lib ^
    user32.lib shell32.lib setupapi.lib ole32.lib advapi32.lib ^
    /DEBUG

echo.
echo Build complete.
echo Output EXE:  %BUILD_DIR%\%NAME_PART%.exe
echo Output PDB:  %BUILD_DIR%\%NAME_PART%.pdb
echo.
pause


@HACK: kinda hacky to not be using events for the mouse, but whatever for right now...

