DEV LOG

When the file extension is changed to .cpp the makefile automatically uses g++ instead of gcc, but I doubt this is robust (like it might not work on mac).


@TODO: do I suppress warnings? they're super annoying

@TODO: I want to write the compiles as python scripts I think for multiplatform. Or maybe just convert them to bash, duh


@TODO: let the bash file take a custom executable name? 


@TODO: for easy itch building needs to be index.html

@BUG: web builds cant load textures


@TODO: for emmscripten try this to allow more memory -s INITIAL_MEMORY=64MB



- @TODO: for input I guess I can just use Raylib's functions. But I kinda prefer IsPressed(device) to IsDevicePressed...
  It just feels a bit dumb to write wrapper and a mapping between our specific type...

  One reason I like passing devices more is its a better mapping to an action system

  Change it to InputMouseDiscrete or maybe just append all with Input_MouseLeft....

  I'd kinda rather have MouseButton_Left than Input_MouseLeft as an API, but raylib has already defined MouseButton...



- @TODO: UGH so if I want to get VS pdb files we have to build differently, which makes sense obvioussly. So now I need to look into how to compile raylib with MSVC instead of cmake

  @TODO: I think I also need to have a way to make sure that students know they must build raylib at least once right?


  ========================================
  Install CMake (if not already): https://cmake.org/download

  Open x64 Native Tools Command Prompt for VS 2022

  Run the following commands:

  cd C:\raylib\raylib
  mkdir build_msvc
  cd build_msvc

  cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Debug -DSTATIC=ON -DBUILD_EXAMPLES=OFF ..
  nmake

  This will build raylib.lib and place it in build_msvc\.

  Your .bat file should now point to:

  set "RAYLIB_LIB=C:\raylib\raylib\build_msvc\raylib"
  ;; verify that raylib.lib is put here every time!
  ========================================

  I dont love that we have to explicity make it...

  - what if we just compile it from the command line each time?

  @TODO: what if we provide a pre-compiled lib they can link against?


@HACK: kinda hacky to not be using events for the mouse, but whatever for right now...


@BUG: running project thru VS doesnt load the texture (I assume cause of a working directory thing?)

@TODO: it seems like I might be able to do the alphablending that I want???


- @TODO: want tiles to now have a scale + rotation.
  I'm unsure if I want to only draw the sprite, or still draw the quad under it. We'd be able to use the color as tint if we do either/or.
  I also wonder if it'd be cool to do a kinda fake
  Maybe also provide an offset? Then we could do them like CRT pixels?


@DESIGN: I like the idea of a tile radiating in scale when something steps on it. Provide along with the tile target values + speed. Dont think we do keyframe animations.


@TODO: need to figure out working directory stuff. I hacked VS to change the working directory manually, but this will break if we try to run the exe from the working directory...



@TODO: I kinda want to just compile it as game.exe all the time... supply an optional exe name. But that way we can easily compile different name files while still getting the same exe used for VS


@BUG: arrows are messed up. In fact a lot of the mappings are just super off.
- wonder if it'd be easier to just make this is code?
- the first 39 entries are empty


@TODO: try casting a shadow or doing some type of effect on the tiles below the ball


@TODO: think the triggers are on the range -1 to 1? need to figure that out



@TODO: maybe we want to throw an error if we're looking for the input ID on the wrong device (like FaceA on Keyboard)
